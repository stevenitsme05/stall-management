extends ./template.pug

block contentStyle
	style.
		#c {
			background-color: grey;
		}

block content
	.row
		.col-md-12
			.card
				.card-header
					h4.card-title Stalls
				.card-body
					.toolbar
					br
					table#stallTable.table.table-bordered.table-striped(cellspacing='0')
						thead
							tr
								th Stall ID
								th Stall Type
								th Stall Status
								th Actions
						tbody
							each stall in stalls
								tr
									td #{stall.strId}
									td #{`${stall.booStallType == 0 ? 'Food Stall' : 'Dry Goods Stall'}`}
									if(stall.booIsAvailable == 0)
										td.text-success Available
										td
											a.btn.btn-round.btn-warning.btn-icon.edit(href='javascript:void(0)' stallType=`${stall.booStallType}` stallId=`${stall.strId}`)
												i.now-ui-icons.design_scissors
											a.btn.btn-round.btn-danger.btn-icon.remove(href='javascript:void(0)' stallType=`${stall.booStallType}` stallId=`${stall.strId}`)
												i.now-ui-icons.ui-1_simple-remove
									else
										td.text-danger Occupied
										td
											a.btn.btn-round.btn-warning.btn-icon(href='javascript:void(0)' stallType=`${stall.booStallType}` stallId=`${stall.strId}` disabled)
												i.now-ui-icons.design_scissors
											a.btn.btn-round.btn-danger.btn-icon(href='javascript:void(0)' stallType=`${stall.booStallType}` stallId=`${stall.strId}` disabled)
												i.now-ui-icons.ui-1_simple-remove
					br
					.row
						.col-md-2
							h5 Stall Map Legend
							p.text-warning Yellow Fill - Food Stalls
							p.text-success Green Fill - Dry Good Stalls
							p Black Border - Available
							p.text-danger Red Border - Occupied
						.col-md-2
							h6 NOTE: Occupied Stalls are not editable
							button.btn.btn-round.btn-success(data-toggle='modal' data-target='#addStallModal') + Add Stall
					.row
						.col-md-10
							center
								canvas#c(width='1330', height='1000')
	#addStallModal.modal.fade(tabindex='-1', role='dialog', aria-hidden='true')
		.modal-dialog(role='document')
			.modal-content
				.modal-header
					h5.modal-title Add Stall
					button.close(type='button', data-dismiss='modal', aria-label='Close')
						span(aria-hidden='true') ×
				form#addStallForm(method='POST' action='/admin/addstall')
					.modal-body
							.form-group
								label Stall ID
									small.text-danger  *
								input.form-control(type='text' name='stallId' placeholder='Enter Stall ID')
							.form-group
								label Stall Type
									small.text-danger  *
								.form-check.form-check-radio
									label.form-check-label
										input.form-check-input(type='radio', name='stallType', value='0' checked)
										| Food Stall
										span.form-check-sign
								.form-check.form-check-radio
									label.form-check-label
										input.form-check-input(type='radio', name='stallType', value='1')
										| Dry Goods Stall
										span.form-check-sign
					.modal-footer
						button#addStallSave.btn.btn-primary(type='submit') Save
	#editStallModal.modal.fade(tabindex='-1', role='dialog', aria-hidden='true')
		.modal-dialog(role='document')
			.modal-content
				.modal-header
					h5.modal-title Edit Stall
					button.close(type='button', data-dismiss='modal', aria-label='Close')
						span(aria-hidden='true') ×
				form#editStallForm(method='POST' action='')
					.modal-body
							.form-group
								label Stall ID
									small.text-danger  *
								input#editStallStallId.form-control(type='text' name='stallId' placeholder='Enter Stall ID')
							.form-group
								label Stall Type
									small.text-danger  *
								.form-check.form-check-radio
									label.form-check-label
										input#editStallFood.form-check-input(type='radio', name='stallType', value='0')
										| Food Stall
										span.form-check-sign
								.form-check.form-check-radio
									label.form-check-label
										input#editStallDry.form-check-input(type='radio', name='stallType', value='1')
										| Dry Goods Stall
										span.form-check-sign
					.modal-footer
						button#editStallSave.btn.btn-primary(type='submit') Edit
						button#deleteStallSave.btn.btn-danger(type='submit') Delete
block contentScript
	
	script.
		$(document).ready(function(){
			$('#stallTable').fadeOut(500)
			$('input[name="stallId"]').mask('A-Z000',{
				translation:{
					'A':{
						pattern: /[A-Z]/
					},
					'0':{
						pattern: /[0-9]/
					},
					'Z':{
						pattern: /[1-9]/
					}
				}
			})
			$('#addStallForm').validate({
				rules:{
					stallId:{
						required: true,
						minlength: 3,
						remote: {
							url: '/admin/stall-id-check',
							type: 'POST',
							data: {
								stallId: function(){
									return $('#addStallForm input[name="stallId"]').val()
								}
							},
						}
					}
				},
				messages:{
					stallId:{
						remote: function(){
							return `Stall ${$('#addStallForm input[name="stallId"]').val()} already exists on the database`
						}
					}
				}
			})
			$(document).on('click', '.edit', function(){
				$('#editStallStallId').val($(this).attr('stallId'))
				if($(this).attr('stallType') == 0){
					$('#editStallFood').prop('checked',true)
				}
				else if($(this).attr('stallType') == 1){
					$('#editStallDry').prop('checked',true)
				}
				$('#editStallForm').prop('action', `/admin/edit-stall?stallId=${$(this).attr('stallId')}`)
				$('#editStallForm').attr('stallId', `${$(this).attr('stallId')}`)
				$('#deleteStallSave').attr('stallId', $(this).attr('stallId'))
				$('#editStallModal').modal('show');
			})
			$('#deleteStallSave').on('click', function(e){
				e.preventDefault()
				$(`.remove[stallId="${$(this).attr('stallId')}"]`).trigger('click')
			})
			$('#editStallForm').validate({
				rules:{
					stallId:{
						required: true,
						minlength: 3,
						remote: {
							url: '/admin/stall-id-check',
							type: 'POST',
							data: {
								stallId: function(){
									return $('#editStallForm input[name="stallId"]').val()
								},
								originalStallId: function(){
									return $('#editStallForm').attr('stallId')
								}
							},
						}
					}
				},
				messages:{
					stallId:{
						remote: function(){
							return `Stall ${$('#editStallForm input[name="stallId"]').val()} already exists on the database`
						}
					}
				}
			})
			$('#editStallModal').on('bs.modal.hidden', function(){
				$('#editStallFood').prop('checked',false)
				$('#editStallDry').prop('checked',false)
			})
			$(document).on('click', '.remove', function(){
				const clicked = $(this).attr('stallId')
				swal({
					title: 'Are you sure?',
					type: 'question',
					showCancelButton: true,
					confirmButtonText: 'Yes',
					cancelButtonText: 'No',
					confirmButtonColor: '#4fbf41',
					cancelButtonColor: '#bf4141'
				}).then(value => {
					if(value){
						$.post('/admin/delete-stall', {id: clicked}).done(function(){
							location.href='/admin/stall'
						})
					}
				})
			})

			// STALL MAP
			function findNewPos(distX, distY, target, obj) {
				if(Math.abs(distX) > Math.abs(distY)) {
					if (distX > 0) {
						target.left = obj.left - target.width;
					} else {
						target.left = obj.left + obj.width;
					}
				} else {
					if (distY > 0) {
						target.top = obj.top - target.height;
					} else {
						target.top = obj.top + obj.height;
					}
				}
			}
			const stalls = !{JSON.stringify(stalls)}
			console.log(stalls)
			let canvas = new fabric.Canvas('c');
			for(let i = 0 ; i < stalls.length ; i++){
				let x = parseInt(stalls[i].dblX)
				let y = parseInt(stalls[i].dblY)
				const rect = new fabric.Rect({
					left: x,
					top: y,
					width: 70,
					height: 70,      
					fill: `${stalls[i].booStallType == 0 ? 'yellow': 'green'}`,
					stroke: `${stalls[i].booIsAvailable == 0 ? 'black': 'red'}`,
					strokeWidth: 4,
				}); 
				const text = new fabric.Text(`${stalls[i].strId}`, {
					left: x + 38,
					top: y + 35,
					width: 70,
					height: 70,  
					fontSize: 20,
					originX: 'center',
					originY: 'center'
				});
				const group = new fabric.Group([ rect, text ], {
					left: x,
					top: y,
					width: 70,
					height: 70,  
					angle: 0,
					selectable: true,
					hasControls: false,
					hasBorders: false,
					hasRotatingPoint: false,
					evented: true,
					id: `${stalls[i].strId}`
				});
				canvas.add(group);
			}
			canvas.on('object:moving', function (options) {
				const snap = 20
				const canvasWidth = 1330
				const canvasHeight = 1000
				// Sets corner position coordinates based on current angle, width and height
				options.target.setCoords();

				// Don't allow objects off the canvas
				if(options.target.left < snap) {
					options.target.left = 0;
				}

				if(options.target.top < snap) {
					options.target.top = 0;
				}

				if((options.target.width + options.target.left) > (canvasWidth - snap)) {
					options.target.left = canvasWidth - options.target.width;
				}

				if((options.target.height + options.target.top) > (canvasHeight - snap)) {
					options.target.top = canvasHeight - options.target.height;
				}

				// Loop through objects
				canvas.forEachObject(function (obj) {
					if (obj === options.target) return;

					// If objects intersect
					if (options.target.isContainedWithinObject(obj) || options.target.intersectsWithObject(obj) || obj.isContainedWithinObject(options.target)) {

						var distX = ((obj.left + obj.width) / 2) - ((options.target.left + options.target.width) / 2);
						var distY = ((obj.top + obj.height) / 2) - ((options.target.top + options.target.height) / 2);

						// Set new position
						findNewPos(distX, distY, options.target, obj);
					}

					// Snap objects to each other horizontally

					// If bottom points are on same Y axis
					if(Math.abs((options.target.top + options.target.height) - (obj.top + obj.height)) < snap) {
						// Snap target BL to object BR
						if(Math.abs(options.target.left - (obj.left + obj.width)) < snap) {
							options.target.left = obj.left + obj.width;
							options.target.top = obj.top + obj.height - options.target.height;
						}

						// Snap target BR to object BL
						if(Math.abs((options.target.left + options.target.width) - obj.left) < snap) {
							options.target.left = obj.left - options.target.width;
							options.target.top = obj.top + obj.height - options.target.height;
						}
					}

					// If top points are on same Y axis
					if(Math.abs(options.target.top - obj.top) < snap) {
						// Snap target TL to object TR
						if(Math.abs(options.target.left - (obj.left + obj.width)) < snap) {
							options.target.left = obj.left + obj.width;
							options.target.top = obj.top;
						}

						// Snap target TR to object TL
						if(Math.abs((options.target.left + options.target.width) - obj.left) < snap) {
							options.target.left = obj.left - options.target.width;
							options.target.top = obj.top;
						}
					}

					// Snap objects to each other vertically

					// If right points are on same X axis
					if(Math.abs((options.target.left + options.target.width) - (obj.left + obj.width)) < snap) {
						// Snap target TR to object BR
						if(Math.abs(options.target.top - (obj.top + obj.height)) < snap) {
							options.target.left = obj.left + obj.width - options.target.width;
							options.target.top = obj.top + obj.height;
						}

						// Snap target BR to object TR
						if(Math.abs((options.target.top + options.target.height) - obj.top) < snap) {
							options.target.left = obj.left + obj.width - options.target.width;
							options.target.top = obj.top - options.target.height;
						}
					}

					// If left points are on same X axis
					if(Math.abs(options.target.left - obj.left) < snap) {
						// Snap target TL to object BL
						if(Math.abs(options.target.top - (obj.top + obj.height)) < snap) {
							options.target.left = obj.left;
							options.target.top = obj.top + obj.height;
						}

						// Snap target BL to object TL
						if(Math.abs((options.target.top + options.target.height) - obj.top) < snap) {
							options.target.left = obj.left;
							options.target.top = obj.top - options.target.height;
						}
					}
				});
				options.target.setCoords();

				// If objects still overlap

				var outerAreaLeft = null,
				outerAreaTop = null,
				outerAreaRight = null,
				outerAreaBottom = null;

				canvas.forEachObject(function (obj) {
					if (obj === options.target) return;

					if (options.target.isContainedWithinObject(obj) || options.target.intersectsWithObject(obj) || obj.isContainedWithinObject(options.target)) {

						var intersectLeft = null,
						intersectTop = null,
						intersectWidth = null,
						intersectHeight = null,
						intersectSize = null,
						targetLeft = options.target.left,
						targetRight = targetLeft + options.target.width,
						targetTop = options.target.top,
						targetBottom = targetTop + options.target.height,
						objectLeft = obj.left,
						objectRight = objectLeft + obj.width,
						objectTop = obj.top,
						objectBottom = objectTop + obj.height;

						// Find intersect information for X axis
						if(targetLeft >= objectLeft && targetLeft <= objectRight) {
							intersectLeft = targetLeft;
							intersectWidth = obj.width - (intersectLeft - objectLeft);

						} else if(objectLeft >= targetLeft && objectLeft <= targetRight) {
							intersectLeft = objectLeft;
							intersectWidth = options.target.width - (intersectLeft - targetLeft);
						}

						// Find intersect information for Y axis
						if(targetTop >= objectTop && targetTop <= objectBottom) {
							intersectTop = targetTop;
							intersectHeight = obj.height - (intersectTop - objectTop);

						} else if(objectTop >= targetTop && objectTop <= targetBottom) {
							intersectTop = objectTop;
							intersectHeight = options.target.height - (intersectTop - targetTop);
						}

						// Find intersect size (this will be 0 if objects are touching but not overlapping)
						if(intersectWidth > 0 && intersectHeight > 0) {
							intersectSize = intersectWidth * intersectHeight;
						}

						// Set outer snapping area
						if(obj.left < outerAreaLeft || outerAreaLeft == null) {
							outerAreaLeft = obj.left;
						}

						if(obj.top < outerAreaTop || outerAreaTop == null) {
							outerAreaTop = obj.top;
						}

						if((obj.left + obj.width) > outerAreaRight || outerAreaRight == null) {
							outerAreaRight = obj.left + obj.width;
						}

						if((obj.top + obj.height) > outerAreaBottom || outerAreaBottom == null) {
							outerAreaBottom = obj.top + obj.height;
						}

						// If objects are intersecting, reposition outside all shapes which touch
						if(intersectSize) {
							var distX = (outerAreaRight / 2) - ((options.target.left + options.target.width) / 2);
							var distY = (outerAreaBottom / 2) - ((options.target.top + options.target.height) / 2);

							// Set new position
							findNewPos(distX, distY, options.target, obj);
						}
					}
				});
			})

			canvas.on('mouse:up', function(options) {
				const idNow = options.target.id
				if(options.target){
					$.post('/admin/relocate-stall', {
						x: options.target.left,
						y: options.target.top,
						id: options.target.id
					}).done(function(){
						$(`.edit[stallId='${idNow}']`).trigger('click')
					})
				}
			});
		})
